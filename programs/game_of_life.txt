$currRow=8
$currCol=9
$maskEdges=10
$maskFull=11
$maskOne=12
$currCount=13
$temp=14
$modMask=15
$neg1=16
$nAliveDead=17
$nAlive=18
$lineBuild=19
$tempLines=20
$one=28

init:
  PTM currRow 8
  ; These bitmasks get the neighbours, we rotate them for each col
  PTM maskEdges b10000010
  PTM maskFull b10000011
  PTM maskOne b00000001
  ; This mask is used to make sure the rows wrap 
  ; when checking above and below for neighbours
  PTM modMask b00000111
  PTM neg1 b11111111
  PTM nAliveDead 3
  PTM nAlive 2
  PTM one 1
loopFrame:
  PTM currRow 8
loopRow:
  PTM lineBuild b00000000
  LDA currRow
  ALU_DEC 0
  ALU_CMP neg1
  JE copyFrame
  STA currRow
  PTM currCol 7
loopCol:
  PTM currCount 0 ; Reset neighbour count to 0

  ; left and right neighbours
  RLA currRow
  ALU_AND maskEdges
  ALU_POP
  ALU_ADD currCount
  STA currCount

  ; top neighbours, get row above
  LDA currRow
  ALU_INC 0
  ALU_AND modMask ; loop round if we've gone higher than 7
  STA temp
  RLA temp ; Having to store and retrieve to use RLA
  ALU_AND maskFull
  ALU_POP
  ALU_ADD currCount
  STA currCount

  ; bottom neighbours, get row below
  LDA currRow
  ALU_DEC 0
  ALU_AND modMask ; loop round if we've gone lower than 0
  STA temp
  RLA temp ; Having to store and retrieve to use RLA
  ALU_AND maskFull
  ALU_POP
  ALU_ADD currCount

  ; If count === 3, then cell becomes (or stays) alive
  ALU_CMP nAliveDead
  JE makeCellLive

  ; if count === 2, then cell stays alive if currently alive
  ALU_CMP nAlive
  JE checkCellAlive

rotMasks:
  ; Rotate the masks
  LDA maskEdges
  ALU_ROT
  STA maskEdges
  LDA maskFull
  ALU_ROT
  STA maskFull
  LDA maskOne
  ALU_ROT
  STA maskOne

  ; Move along a column or jump to next row if at end
  LDA currCol
  ALU_DEC 0
  JE sendLine
  STA currCol
  J loopCol

makeCellLive:
  ; ADD the single mask bit with the line we're building up
  LDA lineBuild
  ALU_ADD maskOne
  STA lineBuild
  J rotMasks

sendLine:
  ; Send the line to display and temp line in mem
  PTA tempLines
  ALU_ADD currRow
  STA temp
  LDA lineBuild
  RSA temp 
  OTD
  J loopRow

checkCellAlive:
  ; (comes from CMP with 2) If cell is alive, keep cell alive
  RLA currRow
  ALU_AND maskOne
  ALU_POP
  ALU_CMP one
  JE makeCellLive
  J rotMasks

copyFrame:
  ; copy temp lines (20-27) into working mem (0-7)
  PTM currRow 8
loopCopy:
  ; current row decrement 7-0 to get TO address
  LDA currRow
  ALU_DEC 0
  ALU_CMP neg1
  JE loopFrame
  STA currRow
  ; add templines address to get FROM address
  ALU_ADD_Q tempLines
  STA temp  ; Having to store and retrieve to use RLA
  RLA temp  ; Load temp line into A
  RSA currRow ; Store temp line in address referenced in currRow (0-7)
  J loopCopy